---
---
<button class="theme-toggle" type="button" aria-label="Toggle theme" title="Toggle theme">
  <svg class="icon" aria-hidden="true" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
    <path d="M12 3v2" />
    <path d="M12 19v2" />
    <path d="M5.22 5.22l1.42 1.42" />
    <path d="M17.36 17.36l1.42 1.42" />
    <path d="M3 12h2" />
    <path d="M19 12h2" />
    <path d="M5.22 18.78l1.42-1.42" />
    <path d="M17.36 6.64l1.42-1.42" />
    <path d="M12 7a5 5 0 1 0 5 5 5 5 0 0 0-5-5Z" />
  </svg>
</button>
<script is:inline>
  (function () {
    const btn = document.currentScript?.previousElementSibling;
    if (!(btn instanceof HTMLButtonElement)) {
      return;
    }
    const storageKey = 'theme';
    const getPreference = () => {
      try {
        const stored = localStorage.getItem(storageKey);
        if (stored === 'light' || stored === 'dark') {
          return stored;
        }
      } catch (error) {
        /* ignore */
      }
      return document.documentElement.getAttribute('data-theme') || 'light';
    };
    const updateMeta = () => {
      const meta = document.querySelector('meta[name="theme-color"]');
      if (!meta) return;
      const bg = getComputedStyle(document.documentElement).getPropertyValue('--bg').trim();
      if (bg) {
        meta.setAttribute('content', bg);
      }
    };
    const applyLabel = (theme) => {
      const isDark = theme === 'dark';
      btn.setAttribute('aria-pressed', String(isDark));
      btn.setAttribute('aria-label', isDark ? 'Activate light theme' : 'Activate dark theme');
      btn.setAttribute('title', isDark ? 'Activate light theme' : 'Activate dark theme');
      btn.dataset.theme = theme;
    };
    const setTheme = (theme) => {
      document.documentElement.setAttribute('data-theme', theme);
      document.documentElement.style.setProperty('color-scheme', theme);
      try {
        localStorage.setItem(storageKey, theme);
      } catch (error) {
        /* ignore */
      }
      applyLabel(theme);
      updateMeta();
    };
    const initial = getPreference();
    applyLabel(initial);
    document.documentElement.style.setProperty('color-scheme', initial);
    updateMeta();
    btn.addEventListener('click', () => {
      const next = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
      setTheme(next);
    });
    if (typeof window.matchMedia === 'function') {
      const media = window.matchMedia('(prefers-color-scheme: dark)');
      const handleMedia = (event) => {
        let stored = null;
        try {
          stored = localStorage.getItem(storageKey);
        } catch (error) {
          stored = null;
        }
        if (stored === 'light' || stored === 'dark') return;
        const next = event.matches ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', next);
        document.documentElement.style.setProperty('color-scheme', next);
        applyLabel(next);
        updateMeta();
      };
      if (typeof media.addEventListener === 'function') {
        media.addEventListener('change', handleMedia);
      } else if (typeof media.addListener === 'function') {
        media.addListener(handleMedia);
      }
    }
  })();
</script>
<style>
  .theme-toggle {
    display: inline-grid;
    place-items: center;
    border: 1px solid color-mix(in oklab, var(--text) 16%, transparent);
    background: color-mix(in srgb, var(--card) 80%, transparent);
    color: var(--text);
    border-radius: 999px;
    padding: 0.5rem;
    cursor: pointer;
    transition: transform 0.2s ease, background 0.2s ease, border-color 0.2s ease;
  }
  .theme-toggle:hover {
    transform: translateY(-1px) scale(1.02);
    background: color-mix(in srgb, var(--card) 92%, transparent);
  }
  .theme-toggle:active {
    transform: translateY(0);
  }
  .theme-toggle:focus-visible {
    outline: none;
    box-shadow: 0 0 0 3px var(--ring);
  }
  .theme-toggle .icon {
    width: 1.1rem;
    height: 1.1rem;
  }
</style>
