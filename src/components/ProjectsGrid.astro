---
import { getCollection } from 'astro:content';
import ProjectCard from './ProjectCard.astro';

const projects = (await getCollection('projects')).sort((a, b) => {
  if (a.data.featured !== b.data.featured) {
    return Number(b.data.featured) - Number(a.data.featured);
  }
  if ((a.data.sortOrder ?? 0) !== (b.data.sortOrder ?? 0)) {
    return (a.data.sortOrder ?? 0) - (b.data.sortOrder ?? 0);
  }
  return a.id.localeCompare(b.id);
});

const featuredProjects = projects.filter((project) => project.data.featured);
const otherProjects = projects.filter((project) => !project.data.featured);
---
<section class="projects" id="projects" aria-labelledby="projects-title" data-section="projects" data-reveal tabindex="-1">
  <div class="section-shell" data-reveal-group>
    <div class="section-header content" data-reveal-item>
      <h2 id="projects-title">Projects</h2>
      <p>Open-source work and collaborations, curated for reliability and developer experience.</p>
    </div>
    {featuredProjects.length > 0 && (
      <div class="featured" data-reveal-item>
        <h3 class="featured-heading">Featured</h3>
        <div class="featured-grid" role="list" data-reveal-group>
          {featuredProjects.map((project, index) => (
            <ProjectCard project={project} variant="featured" revealIndex={index} />
          ))}
        </div>
      </div>
    )}
    {otherProjects.length > 0 ? (
      <div class="projects-grid" role="list" data-reveal-item data-reveal-group>
        {otherProjects.map((project, index) => (
          <ProjectCard project={project} revealIndex={index} />
        ))}
      </div>
    ) : (
      <p class="projects-empty content" data-reveal-item>No additional projects to show right now. Check back soon!</p>
    )}
  </div>
</section>
